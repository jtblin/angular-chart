{"version":3,"sources":["angular-chart.min.js"],"names":["factory","exports","module","require","define","amd","angular","Chart","ChartJsProvider","options","ChartJs","getOptions","type","typeOptions","extend","this","setOptions","customOptions","$get","ChartJsFactory","$timeout","canUpdateChart","newVal","oldVal","length","Array","isArray","every","element","index","reduce","sum","carry","val","getEventHandler","scope","chart","action","triggerOnlyOnChange","lastState","evt","atEvent","getPointsAtEvent","getBarsAtEvent","getSegmentsAtEvent","activePoints","call","equals","$apply","getColours","colours","copy","defaults","global","data","push","getColour","map","convertColour","colour","hexToRgb","substr","getRandomColour","getRandomInt","fillColor","rgba","strokeColor","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","min","max","Math","floor","random","alpha","usingExcanvas","join","concat","hex","bigint","parseInt","r","g","b","getDataSets","labels","series","datasets","item","i","label","getData","value","color","highlight","setLegend","elem","$parent","parent","$oldLegend","find","legend","generateLegend","replaceWith","append","updateChart","values","forEach","dataset","points","bars","dataItem","j","segments","segment","update","$emit","isEmpty","Object","keys","isResponsive","responsive","restrict","chartType","click","hover","dataFormatted","chartData","chartLabels","chartOptions","chartSeries","chartColours","chartLegend","chartClick","chartHover","link","aliasVar","fromName","toName","$watch","resetChart","destroy","createChart","clientHeight","container","cvs","ctx","getContext","onclick","noop","onmousemove","deprecated","attr","console","env","warn","log","document","createElement","className","appendChild","window","G_vmlCanvasManager","initElement","$on","multiTooltipTemplate","animation","provider","directive"],"mappings":"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","file":"angular-chart.min.js","sourcesContent":["(function (factory) {\r\n  'use strict';\r\n  if (typeof exports === 'object') {\r\n    // Node/CommonJS\r\n    module.exports = factory(require('angular'), require('chart.js'));\r\n  }  else if (typeof define === 'function' && define.amd) {\r\n    // AMD. Register as an anonymous module.\r\n    define(['angular', 'chart'], factory);\r\n  } else {\r\n    // Browser globals\r\n    factory(angular, Chart);\r\n  }\r\n}(function (angular, Chart) {\r\n  'use strict';\r\n\r\n  Chart.defaults.global.responsive = true;\r\n  Chart.defaults.global.multiTooltipTemplate = '<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%= value %>';\r\n\r\n  Chart.defaults.global.colours = [\r\n    '#97BBCD', // blue\r\n    '#DCDCDC', // light grey\r\n    '#F7464A', // red\r\n    '#46BFBD', // green\r\n    '#FDB45C', // yellow\r\n    '#949FB1', // grey\r\n    '#4D5360'  // dark grey\r\n  ];\r\n\r\n  var usingExcanvas = typeof window.G_vmlCanvasManager === 'object' &&\r\n    window.G_vmlCanvasManager !== null &&\r\n    typeof window.G_vmlCanvasManager.initElement === 'function';\r\n\r\n  if (usingExcanvas) Chart.defaults.global.animation = false;\r\n\r\n  return angular.module('chart.js', [])\r\n    .provider('ChartJs', ChartJsProvider)\r\n    .factory('ChartJsFactory', ['ChartJs', '$timeout', ChartJsFactory])\r\n    .directive('chartBase', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory(); }])\r\n    .directive('chartLine', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('Line'); }])\r\n    .directive('chartBar', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('Bar'); }])\r\n    .directive('chartRadar', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('Radar'); }])\r\n    .directive('chartDoughnut', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('Doughnut'); }])\r\n    .directive('chartPie', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('Pie'); }])\r\n    .directive('chartPolarArea', ['ChartJsFactory', function (ChartJsFactory) { return new ChartJsFactory('PolarArea'); }]);\r\n\r\n  /**\r\n   * Wrapper for chart.js\r\n   * Allows configuring chart js using the provider\r\n   *\r\n   * angular.module('myModule', ['chart.js']).config(function(ChartJsProvider) {\r\n   *   ChartJsProvider.setOptions({ responsive: true });\r\n   *   ChartJsProvider.setOptions('Line', { responsive: false });\r\n   * })))\r\n   */\r\n  function ChartJsProvider () {\r\n    var options = {};\r\n    var ChartJs = {\r\n      Chart: Chart,\r\n      getOptions: function (type) {\r\n        var typeOptions = type && options[type] || {};\r\n        return angular.extend({}, options, typeOptions);\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Allow to set global options during configuration\r\n     */\r\n    this.setOptions = function (type, customOptions) {\r\n      // If no type was specified set option for the global object\r\n      if (! customOptions) {\r\n        customOptions = type;\r\n        options = angular.extend(options, customOptions);\r\n        return;\r\n      }\r\n      // Set options for the specific chart\r\n      options[type] = angular.extend(options[type] || {}, customOptions);\r\n    };\r\n\r\n    this.$get = function () {\r\n      return ChartJs;\r\n    };\r\n  }\r\n\r\n  function ChartJsFactory (ChartJs, $timeout) {\r\n    return function chart (type) {\r\n      return {\r\n        restrict: 'CA',\r\n        scope: {\r\n          data: '=?',\r\n          labels: '=?',\r\n          options: '=?',\r\n          series: '=?',\r\n          colours: '=?',\r\n          getColour: '=?',\r\n          chartType: '=',\r\n          legend: '@',\r\n          click: '=?',\r\n          hover: '=?',\r\n          dataFormatted: '=?',\r\n\r\n          chartData: '=?',\r\n          chartLabels: '=?',\r\n          chartOptions: '=?',\r\n          chartSeries: '=?',\r\n          chartColours: '=?',\r\n          chartLegend: '@',\r\n          chartClick: '=?',\r\n          chartHover: '=?'\r\n        },\r\n        link: function (scope, elem/*, attrs */) {\r\n          var chart, container = document.createElement('div');\r\n          container.className = 'chart-container';\r\n          elem.replaceWith(container);\r\n          container.appendChild(elem[0]);\r\n\r\n          if (usingExcanvas) window.G_vmlCanvasManager.initElement(elem[0]);\r\n\r\n          ['data', 'labels', 'options', 'series', 'colours', 'legend', 'click', 'hover'].forEach(deprecated);\r\n          function aliasVar (fromName, toName) {\r\n            scope.$watch(fromName, function (newVal) {\r\n              if (typeof newVal === 'undefined') return;\r\n              scope[toName] = newVal;\r\n            });\r\n          }\r\n          /* provide backward compatibility to \"old\" directive names, by\r\n           * having an alias point from the new names to the old names. */\r\n          aliasVar('chartData', 'data');\r\n          aliasVar('chartLabels', 'labels');\r\n          aliasVar('chartOptions', 'options');\r\n          aliasVar('chartSeries', 'series');\r\n          aliasVar('chartColours', 'colours');\r\n          aliasVar('chartLegend', 'legend');\r\n          aliasVar('chartClick', 'click');\r\n          aliasVar('chartHover', 'hover');\r\n\r\n          // Order of setting \"watch\" matter\r\n\r\n          scope.$watch('data', function (newVal, oldVal) {\r\n            if (! newVal || ! newVal.length || (Array.isArray(newVal[0]) && ! newVal[0].length)) return;\r\n            var chartType = type || scope.chartType;\r\n            if (! chartType) return;\r\n\r\n            if (chart) {\r\n              if (canUpdateChart(newVal, oldVal)) return updateChart(chart, newVal, scope, elem);\r\n              chart.destroy();\r\n            }\r\n\r\n            createChart(chartType);\r\n          }, true);\r\n\r\n          scope.$watch('series', resetChart, true);\r\n          scope.$watch('labels', resetChart, true);\r\n          scope.$watch('options', resetChart, true);\r\n          scope.$watch('colours', resetChart, true);\r\n\r\n          scope.$watch('chartType', function (newVal, oldVal) {\r\n            if (isEmpty(newVal)) return;\r\n            if (angular.equals(newVal, oldVal)) return;\r\n            if (chart) chart.destroy();\r\n            createChart(newVal);\r\n          });\r\n\r\n          scope.$on('$destroy', function () {\r\n            if (chart) chart.destroy();\r\n          });\r\n\r\n          function resetChart (newVal, oldVal) {\r\n            if (isEmpty(newVal)) return;\r\n            if (angular.equals(newVal, oldVal)) return;\r\n            var chartType = type || scope.chartType;\r\n            if (! chartType) return;\r\n\r\n            // chart.update() doesn't work for series and labels\r\n            // so we have to re-create the chart entirely\r\n            if (chart) chart.destroy();\r\n\r\n            createChart(chartType);\r\n          }\r\n\r\n          function createChart (type) {\r\n            if (isResponsive(type, scope) && elem[0].clientHeight === 0 && container.clientHeight === 0) {\r\n              return $timeout(function () {\r\n                createChart(type);\r\n              }, 50, false);\r\n            }\r\n            if (! scope.data || ! scope.data.length) return;\r\n            scope.getColour = typeof scope.getColour === 'function' ? scope.getColour : getRandomColour;\r\n            scope.colours = getColours(type, scope);\r\n            var cvs = elem[0], ctx = cvs.getContext('2d');\r\n            var data = scope.dataFormatted ? scope.data : (Array.isArray(scope.data[0]) ?\r\n              getDataSets(scope.labels, scope.data, scope.series || [], scope.colours) :\r\n              getData(scope.labels, scope.data, scope.colours));\r\n            var options = angular.extend({}, ChartJs.getOptions(type), scope.options);\r\n            chart = new ChartJs.Chart(ctx)[type](data, options);\r\n            scope.$emit('create', chart);\r\n\r\n            // Bind events\r\n            cvs.onclick = scope.click ? getEventHandler(scope, chart, 'click', false) : angular.noop;\r\n            cvs.onmousemove = scope.hover ? getEventHandler(scope, chart, 'hover', true) : angular.noop;\r\n\r\n            if (scope.legend && scope.legend !== 'false') setLegend(elem, chart);\r\n          }\r\n\r\n          function deprecated (attr) {\r\n            if (typeof console !== 'undefined' && ChartJs.getOptions().env !== 'test') {\r\n              var warn = typeof console.warn === 'function' ? console.warn : console.log;\r\n              if (!! scope[attr]) {\r\n                warn.call(console, '\"%s\" is deprecated and will be removed in a future version. ' +\r\n                  'Please use \"chart-%s\" instead.', attr, attr);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      };\r\n    };\r\n\r\n    function canUpdateChart (newVal, oldVal) {\r\n      if (newVal && oldVal && newVal.length && oldVal.length) {\r\n        return Array.isArray(newVal[0]) ?\r\n        newVal.length === oldVal.length && newVal.every(function (element, index) {\r\n          return element.length === oldVal[index].length; }) :\r\n          oldVal.reduce(sum, 0) > 0 ? newVal.length === oldVal.length : false;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    function sum (carry, val) {\r\n      return carry + val;\r\n    }\r\n\r\n    function getEventHandler (scope, chart, action, triggerOnlyOnChange) {\r\n      var lastState = null;\r\n      return function (evt) {\r\n        var atEvent = chart.getPointsAtEvent || chart.getBarsAtEvent || chart.getSegmentsAtEvent;\r\n        if (atEvent) {\r\n          var activePoints = atEvent.call(chart, evt);\r\n          if (triggerOnlyOnChange === false || angular.equals(lastState, activePoints) === false) {\r\n            lastState = activePoints;\r\n            scope[action](activePoints, evt);\r\n            scope.$apply();\r\n          }\r\n        }\r\n      };\r\n    }\r\n\r\n    function getColours (type, scope) {\r\n      var colours = angular.copy(scope.colours ||\r\n        ChartJs.getOptions(type).colours ||\r\n        Chart.defaults.global.colours\r\n      );\r\n      while (colours.length < scope.data.length) {\r\n        colours.push(scope.getColour());\r\n      }\r\n      return colours.map(convertColour);\r\n    }\r\n\r\n    function convertColour (colour) {\r\n      if (typeof colour === 'object' && colour !== null) return colour;\r\n      if (typeof colour === 'string' && colour[0] === '#') return getColour(hexToRgb(colour.substr(1)));\r\n      return getRandomColour();\r\n    }\r\n\r\n    function getRandomColour () {\r\n      var colour = [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\r\n      return getColour(colour);\r\n    }\r\n\r\n    function getColour (colour) {\r\n      return {\r\n        fillColor: rgba(colour, 0.2),\r\n        strokeColor: rgba(colour, 1),\r\n        pointColor: rgba(colour, 1),\r\n        pointStrokeColor: '#fff',\r\n        pointHighlightFill: '#fff',\r\n        pointHighlightStroke: rgba(colour, 0.8)\r\n      };\r\n    }\r\n\r\n    function getRandomInt (min, max) {\r\n      return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    function rgba (colour, alpha) {\r\n      if (usingExcanvas) {\r\n        // rgba not supported by IE8\r\n        return 'rgb(' + colour.join(',') + ')';\r\n      } else {\r\n        return 'rgba(' + colour.concat(alpha).join(',') + ')';\r\n      }\r\n    }\r\n\r\n    // Credit: http://stackoverflow.com/a/11508164/1190235\r\n    function hexToRgb (hex) {\r\n      var bigint = parseInt(hex, 16),\r\n        r = (bigint >> 16) & 255,\r\n        g = (bigint >> 8) & 255,\r\n        b = bigint & 255;\r\n\r\n      return [r, g, b];\r\n    }\r\n\r\n    function getDataSets (labels, data, series, colours) {\r\n      return {\r\n        labels: labels,\r\n        datasets: data.map(function (item, i) {\r\n          return angular.extend({}, colours[i], {\r\n            label: series[i],\r\n            data: item\r\n          });\r\n        })\r\n      };\r\n    }\r\n\r\n    function getData (labels, data, colours) {\r\n      return labels.map(function (label, i) {\r\n        return angular.extend({}, colours[i], {\r\n          label: label,\r\n          value: data[i],\r\n          color: colours[i].strokeColor,\r\n          highlight: colours[i].pointHighlightStroke\r\n        });\r\n      });\r\n    }\r\n\r\n    function setLegend (elem, chart) {\r\n      var $parent = elem.parent(),\r\n          $oldLegend = $parent.find('chart-legend'),\r\n          legend = '<chart-legend>' + chart.generateLegend() + '</chart-legend>';\r\n      if ($oldLegend.length) $oldLegend.replaceWith(legend);\r\n      else $parent.append(legend);\r\n    }\r\n\r\n    function updateChart (chart, values, scope, elem) {\r\n      if (Array.isArray(scope.data[0])) {\r\n        chart.datasets.forEach(function (dataset, i) {\r\n          (dataset.points || dataset.bars).forEach(function (dataItem, j) {\r\n            dataItem.value = values[i][j];\r\n          });\r\n        });\r\n      } else {\r\n        chart.segments.forEach(function (segment, i) {\r\n          segment.value = values[i];\r\n        });\r\n      }\r\n      chart.update();\r\n      scope.$emit('update', chart);\r\n      if (scope.legend && scope.legend !== 'false') setLegend(elem, chart);\r\n    }\r\n\r\n    function isEmpty (value) {\r\n      return ! value ||\r\n        (Array.isArray(value) && ! value.length) ||\r\n        (typeof value === 'object' && ! Object.keys(value).length);\r\n    }\r\n\r\n    function isResponsive (type, scope) {\r\n      var options = angular.extend({}, Chart.defaults.global, ChartJs.getOptions(type), scope.options);\r\n      return options.responsive;\r\n    }\r\n  }\r\n}));\r\n"],"sourceRoot":"/source/"}